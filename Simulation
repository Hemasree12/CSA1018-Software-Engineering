# Required Libraries
from datetime import datetime
import random
# Task Class
class Task:
    def __init__(self, task_id, name, status="To Do"):
        self.task_id = task_id
        self.name = name
        self.status = status
        self.created_at = datetime.now()
    def update_status(self, new_status):
        self.status = new_status
        print(f"Task '{self.name}' updated to '{self.status}'")

# GitHub Pull Request Class
class PullRequest:
    def __init__(self, pr_id, title, status="Open"):
        self.pr_id = pr_id
        self.title = title
        self.status = status
        self.created_at = datetime.now()

    def merge_pr(self):
        self.status = "Merged"
        print(f"Pull Request '{self.title}' merged successfully!")

# Meeting Summary Generator
class MeetingSummary:
    def __init__(self, meeting_notes):
        self.meeting_notes = meeting_notes

    def generate_summary(self):
        print("\n--- Meeting Summary Generated ---")
        print(f"Summary: {self.meeting_notes[:50]}... [Truncated]")
        return f"Summary: {self.meeting_notes[:50]}... [Truncated]"

# Role-Based Access Control (RBAC)
class User:
    def __init__(self, name, role):
        self.name = name
        self.role = role

    def access_control(self):
        roles = {
            "Project Manager": ["View Dashboard", "Create Tasks", "Generate Reports"],
            "Developer": ["View Tasks", "Commit Code", "Create Pull Requests"],
            "QA Engineer": ["View Tasks", "Track Defects", "Run Tests"],
        }
        print(f"{self.name} with role '{self.role}' has permissions: {roles.get(self.role, ['No Access'])}")

# Unified Dashboard
class UnifiedDashboard:
    def __init__(self):
        self.tasks = []
        self.pull_requests = []
        self.summaries = []

    def create_task(self, name):
        task_id = len(self.tasks) + 1
        task = Task(task_id, name)
        self.tasks.append(task)
        print(f"Task '{name}' created successfully!")

    def commit_code(self, pr_title):
        pr_id = len(self.pull_requests) + 1
        pr = PullRequest(pr_id, pr_title)
        self.pull_requests.append(pr)
        print(f"Pull Request '{pr_title}' created successfully!")

    def generate_meeting_summary(self, notes):
        summary = MeetingSummary(notes)
        summary_text = summary.generate_summary()
        self.summaries.append(summary_text)

    def show_dashboard(self):
        print("\n--- Unified Dashboard ---")
        print("Tasks:")
        for task in self.tasks:
            print(f"- {task.name} | Status: {task.status}")
        print("\nPull Requests:")
        for pr in self.pull_requests:
            print(f"- {pr.title} | Status: {pr.status}")

# Simulation of System Operations
def simulate_operations():
    # Create Dashboard
    dashboard = UnifiedDashboard()

    # Create Users
    manager = User("Alice", "Project Manager")
    dev = User("Bob", "Developer")
    qa = User("Eve", "QA Engineer")

    # Role-Based Access Control
    manager.access_control()
    dev.access_control()
    qa.access_control()

    # Task Creation by Manager
    dashboard.create_task("Set up project repository")
    dashboard.create_task("Design API structure")

    # Task Status Update
    dashboard.tasks[0].update_status("In Progress")
    dashboard.tasks[1].update_status("Completed")

    # Developer Commits Code
    dashboard.commit_code("Add initial API endpoints")
    dashboard.pull_requests[0].merge_pr()

    # Generate Meeting Summary
    dashboard.generate_meeting_summary("Sprint planning meeting with action items discussed")

    # Show Final Dashboard Status
    dashboard.show_dashboard()
# Run Simulation
if __name__ == "__main__":
    simulate_operations()

OUTPUT:
Alice with role 'Project Manager' has permissions: ['View Dashboard', 'Create Tasks', 'Generate Reports']
Bob with role 'Developer' has permissions: ['View Tasks', 'Commit Code', 'Create Pull Requests']
Eve with role 'QA Engineer' has permissions: ['View Tasks', 'Track Defects', 'Run Tests']
Task 'Set up project repository' created successfully!
Task 'Design API structure' created successfully!
Task 'Set up project repository' updated to 'In Progress'
Task 'Design API structure' updated to 'Completed'
Pull Request 'Add initial API endpoints' created successfully!
Pull Request 'Add initial API endpoints' merged successfully!

--- Meeting Summary Generated ---
Summary: Sprint planning meeting with action items dis...

--- Unified Dashboard ---
Tasks:
- Set up project repository | Status: In Progress
- Design API structure | Status: Completed

Pull Requests:
- Add initial API endpoints | Status: Merged

